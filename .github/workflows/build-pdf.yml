name: Build PDF Documentation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version override (e.g., 1.0.0)'
        required: false
        type: string

env:
  PDF_NAME: Mastering-New-Python-Libraries

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for semantic versioning
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Pandoc and LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended texlive-extra-utils texlive-latex-extra
    
    - name: Get version from tag or generate semantic version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Extract version from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
        elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
          # Use manual version override
          VERSION="${{ github.event.inputs.version }}"
        else
          # Generate semantic version from commit history
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          
          # Determine version bump based on commit messages since last tag
          COMMITS_SINCE_TAG=$(git log --oneline $LATEST_TAG..HEAD | wc -l)
          
          if [ $COMMITS_SINCE_TAG -eq 0 ]; then
            # No commits since last tag, use existing version
            VERSION=$LATEST_VERSION
          else
            # Check commit messages for semantic versioning keywords
            COMMIT_MESSAGES=$(git log --oneline $LATEST_TAG..HEAD)
            
            if echo "$COMMIT_MESSAGES" | grep -q "BREAKING CHANGE\|!:"; then
              # Major version bump
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMIT_MESSAGES" | grep -q "feat:"; then
              # Minor version bump
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              # Patch version bump
              PATCH=$((PATCH + 1))
            fi
            
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "PDF_NAME=${PDF_NAME}-v$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
    
    - name: Create PDF from README
      run: |
        pandoc README.md \
          -o "${PDF_NAME}-v${{ steps.version.outputs.version }}.pdf" \
          --pdf-engine=xelatex \
          --variable=geometry:margin=1in \
          --variable=fontsize:11pt \
          --variable=mainfont:"DejaVu Sans" \
          --variable=monofont:"DejaVu Sans Mono" \
          --variable=colorlinks:true \
          --variable=linkcolor:blue \
          --variable=urlcolor:blue \
          --variable=toccolor:gray \
          --toc \
          --number-sections \
          --highlight-style=tango \
          --metadata=title:"Mastering New Python Libraries" \
          --metadata=author:"Gregory Damiani" \
          --metadata=date:"$(date +'%B %d, %Y')"
    
    - name: Upload PDF artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.version.outputs.PDF_NAME }}
        path: ${{ steps.version.outputs.PDF_NAME }}.pdf
        retention-days: 90
    
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.version.outputs.PDF_NAME }}.pdf
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üìö **PDF Documentation Built Successfully!**
          
          Version: **${{ steps.version.outputs.version }}**
          PDF: **${{ steps.version.outputs.PDF_NAME }}.pdf**
          
          The PDF has been generated and is available as a build artifact. You can download it from the Actions tab.
          
          ### What's included:
          - Complete README.md content
          - Table of contents
          - Syntax highlighting
          - Professional formatting
          
          Download the artifact to review the generated documentation.`
          })
    
    - name: Output version info
      run: |
        echo "‚úÖ PDF built successfully!"
        echo "üìÑ File: ${{ steps.version.outputs.PDF_NAME }}.pdf"
        echo "üè∑Ô∏è  Version: ${{ steps.version.outputs.version }}"
        echo "üîó Artifact: ${{ steps.version.outputs.PDF_NAME }}" 